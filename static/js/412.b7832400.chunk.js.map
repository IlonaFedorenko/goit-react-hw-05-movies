{"version":3,"file":"static/js/412.b7832400.chunk.js","mappings":"sSAEMA,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBL,EAAIM,IAHxB,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFAECC,EAFD,8BAEiCD,GAFjC,kBAIoBV,EAAIM,IAAIK,GAJ5B,uBAIKJ,EAJL,EAIKA,KAJL,kBAOIA,GAPJ,2HAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCF,EADD,iBACoBE,GADpB,kBAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,iHC2BP,UA1EoB,WAClB,OAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAad,IAAI,SACrC,GAA0BU,EAAAA,EAAAA,WAAS,kBAAMM,GAAe,EAArB,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAEYnB,EAAAA,EAAAA,IAAaa,GAFzB,gBAENd,EAFM,EAENA,QACRU,EAAUV,GAHI,gDAKdqB,QAAQC,IAAR,MALc,yDAAH,qDASXR,GACFM,GAEH,GAAE,CAACN,IAYJ,OACE,iCACE,kBAAMS,SARW,SAAAC,GACnBA,EAAEC,iBACFZ,EAAe,CAAEE,MAAOA,IACxBC,EAAS,GACV,EAIG,WACE,kBACEU,SAda,SAAAF,GACnBR,EAASQ,EAAEG,OAAOC,MACnB,EAaOC,KAAK,OACLC,KAAK,SACLF,MAAOb,EACPgB,YAAY,eACZC,aAAa,MACbC,WAAS,KAEX,mBAAQJ,KAAK,SAAb,UACE,2CAIJ,wBACGpB,EAAOyB,KAAI,SAAAC,GACV,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAM9B,IAAMgC,MAAO,CAAEC,KAAMrB,GAAxC,SACGkB,EAAMI,SAFFJ,EAAM9B,GAMlB,QAIR,C","sources":["api/Api.jsx","components/MovieSearch/MovieSearch.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst url = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'ddd8814addf1eaac90b3b416df51b9bc',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const getUrl = `/trending/movie/week`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovies(movieName) {\n  // const getUrl = `/search/movie`;\n  const getUrl = `/search/movie?query=${movieName}`;\n  try {\n    const { data } = await url.get(getUrl);\n    // const { data } = await url.get(getUrl, {params: { query: movieName }, });\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getDetailsMovies(id) {\n  const getUrl = `/movie/${id}`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCreditsMovies(id) {\n  const getUrl = `/movie/${id}/credits`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviewsMovies(id) {\n  const getUrl = `/movie/${id}/reviews`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { searchMovies } from '../../api/Api';\nimport PropTypes from 'prop-types';\n\nconst MovieSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSerchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n  const [query, setQuery] = useState(() => searchQuery || '');\n\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const { results } = await searchMovies(searchQuery);\n        setMovies(results);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    if (searchQuery) {\n      getMovies();\n    }\n  }, [searchQuery]);\n\n  const handleChange = e => {\n    setQuery(e.target.value);\n  };\n\n  const handelSubmit = e => {\n    e.preventDefault();\n    setSerchParams({ query: query });\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handelSubmit}>\n        <input\n          onChange={handleChange}\n          type=\"text\"\n          name=\"search\"\n          value={query}\n          placeholder=\"Search movie\"\n          autoComplete=\"off\"\n          autoFocus\n        ></input>\n        <button type=\"submit\">\n          <span>Search</span>\n        </button>\n      </form>\n\n      <ul>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nMovieSearch.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default MovieSearch;\n"],"names":["url","axios","baseURL","params","api_key","getTrendingMovies","get","data","results","searchMovies","movieName","getUrl","getDetailsMovies","id","getCreditsMovies","getReviewsMovies","useState","movies","setMovies","useSearchParams","searchParams","setSerchParams","searchQuery","query","setQuery","location","useLocation","useEffect","getMovies","console","log","onSubmit","e","preventDefault","onChange","target","value","type","name","placeholder","autoComplete","autoFocus","map","movie","to","state","from","title"],"sourceRoot":""}