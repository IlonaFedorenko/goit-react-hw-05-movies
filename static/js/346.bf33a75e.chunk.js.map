{"version":3,"file":"static/js/346.bf33a75e.chunk.js","mappings":"sSAEMA,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBL,EAAIM,IAHxB,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFAECC,EAFD,8BAEiCD,GAFjC,kBAIoBV,EAAIM,IAAIK,GAJ5B,uBAIKJ,EAJL,EAIKA,KAJL,kBAOIA,GAPJ,2HAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCF,EADD,iBACoBE,GADpB,kBAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,kHCYP,UA1DA,WACE,IAAQS,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAcA,IAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESR,EAAAA,EAAAA,IAAiBE,GAF1B,gBAENO,EAFM,EAENA,KACRH,EAAUG,GAHI,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDAQfH,GACD,GAAE,CAACN,IAEkB,IAAlBG,EAAOO,OAIX,OACE,+BACE,0BACE,wBACGP,EAAOQ,KAAI,YAA0D,IAAvDC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAChD,OACE,2BACE,gBACEC,IACED,EAAY,yCAC0BA,GAClCE,EAENC,IAAI,YACJC,MAAM,SAER,wBAAKN,KACL,uCAAeC,OAXRF,EAcZ,SAKV,C","sources":["api/Api.jsx","pages/Movies/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst url = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'ddd8814addf1eaac90b3b416df51b9bc',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const getUrl = `/trending/movie/week`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovies(movieName) {\n  // const getUrl = `/search/movie`;\n  const getUrl = `/search/movie?query=${movieName}`;\n  try {\n    const { data } = await url.get(getUrl);\n    // const { data } = await url.get(getUrl, {params: { query: movieName }, });\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getDetailsMovies(id) {\n  const getUrl = `/movie/${id}`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCreditsMovies(id) {\n  const getUrl = `/movie/${id}/credits`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviewsMovies(id) {\n  const getUrl = `/movie/${id}/reviews`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCreditsMovies } from '../../../api/Api';\nimport noPoster from '../../../img/noPoster.jpg';\nimport PropTypes from 'prop-types';\n\nfunction Cast() {\n  const { moviesId } = useParams();\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const { cast } = await getCreditsMovies(moviesId);\n        setMovies(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovies();\n  }, [moviesId]);\n\n  if (movies.length === 0) {\n    return;\n  }\n\n  return (\n    <>\n      <div>\n        <ul>\n          {movies.map(({ cast_id, original_name, character, profile_path }) => {\n            return (\n              <li key={cast_id}>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : noPoster\n                  }\n                  alt=\"character\"\n                  width=\"150\"\n                />\n                <h3>{original_name}</h3>\n                <p>Character: {character}</p>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nCast.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Cast;\n"],"names":["url","axios","baseURL","params","api_key","getTrendingMovies","get","data","results","searchMovies","movieName","getUrl","getDetailsMovies","id","getCreditsMovies","getReviewsMovies","moviesId","useParams","useState","movies","setMovies","useEffect","getMovies","cast","console","log","length","map","cast_id","original_name","character","profile_path","src","noPoster","alt","width"],"sourceRoot":""}