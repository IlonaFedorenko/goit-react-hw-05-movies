{"version":3,"file":"static/js/729.e4ad3bb0.chunk.js","mappings":"sSAEMA,E,OAAMC,EAAAA,OAAa,CACvBC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qIAGoBL,EAAIM,IAHxB,+CAGKC,EAHL,EAGKA,KAHL,kBAIIA,EAAKC,SAJT,2HAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,kFAECC,EAFD,8BAEiCD,GAFjC,kBAIoBV,EAAIM,IAAIK,GAJ5B,uBAIKJ,EAJL,EAIKA,KAJL,kBAOIA,GAPJ,2HAaA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,kFACCF,EADD,iBACoBE,GADpB,kBAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAgCD,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAAgCF,GAAhC,kFACCF,EADD,iBACoBE,EADpB,8BAGoBb,EAAIM,IAAIK,GAH5B,uBAGKJ,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2H,0HCkDP,UA1FA,WAAyB,IAAD,QACdS,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAcjB,IAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAEOZ,EAAAA,EAAAA,IAAiBI,GAFxB,OAERG,EAFQ,OAGdC,EAAUD,GAHI,gDAKdM,QAAQC,IAAR,MALc,yDAAH,qDAQfF,GACD,GAAE,CAACR,IAEkB,IAAlBG,EAAOQ,OAAX,CAIA,IAAQC,EAAuDT,EAAvDS,MAAOC,EAAgDV,EAAhDU,SAAUC,EAAsCX,EAAtCW,OAAQC,EAA8BZ,EAA9BY,YAC3BC,GAAsC,GADmBb,EAAjBc,cACEC,UAE1CC,EAAaL,EAAOM,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,KAAe,EAATxB,GAErC,MADU,UAAMwB,EAAN,IAEX,IAED,OACE,iCACE,SAAC,KAAD,CAAMC,GAAE,oBAAEjB,EAASkB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,SAAlC,mBACA,4BACE,gBACEC,IACEV,EAAW,yCAC2BA,GAClCW,EAENC,IAAI,SACJC,OAAO,SAET,4BACE,0BAAKhB,EAAL,QACA,wCAAgBI,EAAsB,IAAtC,QACA,sCACA,uBAAIH,KACJ,oCACA,uBAAIM,WAGR,4BACE,mDACA,2BACE,yBACE,SAAC,KAAD,CAASG,GAAG,OAAOC,MAAO,CAAEC,KAAI,UAAEnB,EAASkB,aAAX,aAAE,EAAgBC,MAAlD,qBAIF,yBACE,SAAC,KAAD,CAASF,GAAG,UAAUC,MAAO,CAAEC,KAAI,UAAEnB,EAASkB,aAAX,aAAE,EAAgBC,MAArD,2BAMJ,SAAC,EAAAK,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,WAhDP,CAqDF,C","sources":["api/Api.jsx","pages/Movies/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst url = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: 'ddd8814addf1eaac90b3b416df51b9bc',\n  },\n});\n\nexport async function getTrendingMovies() {\n  const getUrl = `/trending/movie/week`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data.results;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovies(movieName) {\n  // const getUrl = `/search/movie`;\n  const getUrl = `/search/movie?query=${movieName}`;\n  try {\n    const { data } = await url.get(getUrl);\n    // const { data } = await url.get(getUrl, {params: { query: movieName }, });\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getDetailsMovies(id) {\n  const getUrl = `/movie/${id}`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getCreditsMovies(id) {\n  const getUrl = `/movie/${id}/credits`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getReviewsMovies(id) {\n  const getUrl = `/movie/${id}/reviews`;\n  try {\n    const { data } = await url.get(getUrl);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n","import React, { useState, useEffect, Suspense } from 'react';\nimport {\n  useParams,\n  NavLink,\n  Link,\n  useLocation,\n  Outlet,\n} from 'react-router-dom';\nimport { getDetailsMovies } from '../../../api/Api';\nimport PropTypes from 'prop-types';\nimport noPoster from '../../../img/noPoster.jpg';\n\nfunction MovieDetails() {\n  const { moviesId } = useParams();\n  const [movies, setMovies] = useState([]);\n  const location = useLocation();\n\n  useEffect(() => {\n    const getMovies = async () => {\n      try {\n        const movies = await getDetailsMovies(moviesId);\n        setMovies(movies);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    getMovies();\n  }, [moviesId]);\n\n  if (movies.length === 0) {\n    return;\n  }\n\n  const { title, overview, genres, poster_path, vote_average } = movies;\n  const userScoreNormalized = (vote_average * 10).toFixed();\n\n  const genresPars = genres.map(({ name, id }) => {\n    const gens = `${name} `;\n    return gens;\n  });\n\n  return (\n    <>\n      <Link to={location.state?.from ?? '/movie'}>Back</Link>\n      <div>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w500${poster_path}`\n              : noPoster\n          }\n          alt=\"Poster\"\n          height=\"400\"\n        />\n        <div>\n          <h1>{title}:</h1>\n          <p>User Score: {userScoreNormalized + '%'} </p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genresPars}</p>\n        </div>\n      </div>\n      <div>\n        <h3>Additional iformation</h3>\n        <ul>\n          <li>\n            <NavLink to=\"cast\" state={{ from: location.state?.from }}>\n              Cast\n            </NavLink>\n          </li>\n          <li>\n            <NavLink to=\"reviews\" state={{ from: location.state?.from }}>\n              Reviews\n            </NavLink>\n          </li>\n        </ul>\n\n        <Suspense fallback={<div>Loading...</div>}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n}\n\nMovieDetails.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      poster_path: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      vote_average: PropTypes.string.isRequired,\n      genres: PropTypes.arrayOf(\n        PropTypes.exact({\n          id: PropTypes.string.isRequired,\n          name: PropTypes.string.isRequired,\n        })\n      ),\n    })\n  ),\n};\n\nexport default MovieDetails;\n"],"names":["url","axios","baseURL","params","api_key","getTrendingMovies","get","data","results","searchMovies","movieName","getUrl","getDetailsMovies","id","getCreditsMovies","getReviewsMovies","moviesId","useParams","useState","movies","setMovies","location","useLocation","useEffect","getMovies","console","log","length","title","overview","genres","poster_path","userScoreNormalized","vote_average","toFixed","genresPars","map","name","to","state","from","src","noPoster","alt","height","Suspense","fallback"],"sourceRoot":""}